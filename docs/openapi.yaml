openapi: 3.0.1
info:
  title: Arborist
  version: 2.4.0
  description: authorization microservice to handle ABAC based on configured policies
  license:
    name: 'Apache 2.0'
    url: 'https://github.com/uc-cdis/arborist'
tags:
  - name: auth
    description: make requests to determine authorization
  - name: resource
    description: manage resources in the arborist database
  - name: role
    description: manage roles in the arborist database
  - name: policy
    description: manage policies to grant authorization
paths:
  /auth/mapping:
    get:
      tags:
        - auth
      description: >-
        Return a mapping from the resources the specified user can access, to
        the actions which they are authorized for on those resources. This includes
        the mappings available to members of the `anonymous` and `logged-in` groups, 
        which apply to all users (anonymous) and to all logged-in users (logged-in). 


        This endpoint accepts either a username in the query string or a username
        in a token in the Authorization header. If no username is provided in the query
        string, the endpoint will use the username in the token in the Authorization
        header.


        If the specified user is not recognized by arborist, this endpoint returns
        ONLY the mappings available to members of the `anonymous` and `logged-in` groups.


        If no username is provided (i.e., if there is no username passed in the query
        string AND no token is provided in the Authorization header), this endpoint returns ONLY the mappings 
        available to members of the `anonymous` group.
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: false
          description: the username in arborist to return results for
        - in: header
          name: Authorization
          schema:
            type: string
          required: false
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                description: >-
                  map from resource paths as keys, to lists of actions
                type: object
                example: {"/programs/DEV": [{"service": "*", "method": "read"}, {"service": "*", "method": "read-storage"}]}
        401:
          description: >-
            Authorization header or token failed to validate (authentication error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthenticated'
    post:
      tags:
        - auth
      description: >-
        Return a mapping from the resources the specified user can access, to
        the actions which they are authorized for on those resources. This includes
        the mappings available to members of the `anonymous` and `logged-in` groups, 
        which apply to all users (anonymous) and to all logged-in users (logged-in). 


        If the specified user is not recognized by arborist, this endpoint returns
        ONLY the mappings available to members of the `anonymous` and `logged-in` groups.

      requestBody:

        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: the username in arborist to return results for
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                description: >-
                  map from resource paths as keys, to lists of actions
                type: object
                example: {"/programs/DEV": [{"service": "*", "method": "read"}, {"service": "*", "method": "read-storage"}]}
        400:
          description: >-
            the input was somehow invalid; probably missing username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
  /auth/request:
    post:
      tags:
        - auth
      description: >-
        Ask arborist to check authorization on a user request. A client of the
        Gen3 auth stack sends the user's JWT to this endpoint, along with the
        information about the user's specific request. The terminology used to
        describe user requests is flexible and arborist does not "nail it down";
        however our usage so far is to use the permission model to capture the
        basic set of operations one might expect in ABAC (read/write, etc.)
        combined with the client service, and the path for the resource the user
        is trying to access.
        If using a list of `requests`, the response is positive if the user
        has access to ALL items in the list.
        If the given JWT has `azp` field, the permission of
        the corresponding client will be also checked; only when both the user
        and the client have permission can the response be positive.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequestBody'
      responses:
        200:
          description: >-
            Arborist successfully returned an authorization decision. NOTE
            that a 200 status DOES NOT indicate authorization, only that the
            input was valid. The `"auth"` field in the response indicates
            authorization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRequestResponse'
        400:
          description: >-
            The input was somehow invalid; for example, a given resource does
            not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
  /auth/proxy:
    get:
      tags:
        - auth
      description: >-
        Ask arborist to check authorization on a user request. A client of the
        Gen3 auth stack sends the user's JWT to this endpoint, along with the
        information about the user's specific request. The terminology used to
        describe user requests is flexible and arborist does not "nail it down";
        however our usage so far is to use the permission model to capture the
        basic set of operations one might expect in ABAC (read/write, etc.)
        combined with the client service, and the path for the resource the user
        is trying to access.
        If the given JWT has `azp` field, the permission of
        the corresponding client will be also checked; only when both the user
        and the client have permission can the response be positive.
      parameters:
        - in: query
          name: resource
          required: true
          schema:
            type: string
        - in: query
          name: service
          required: true
          schema:
            type: string
        - in: query
          name: method
          required: true
          schema:
            type: string
      responses:
        200:
          description: >-
            Arborist successfully returned an authorization decision. NOTE
            that a 200 status DOES NOT indicate authorization, only that the
            input was valid. The `"ok"` field in the response indicates
            authorization.
        400:
          description: >-
            The input was somehow invalid; for example, a given resource does
            not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        401:
          description: >-
            The user is not logged in.
        403:
          description: >-
            The user does not have access.
  /auth/resources:
    get:
      tags:
        - auth
      description: >-
        Given a user token in the Authorization header, return a list of
        resources which are accessible to the user (using any action) according
        to the policies listed in the token. This includes the resources available 
        to members of the `anonymous` and `logged-in` groups, which apply to all users 
        (anonymous) and to all logged-in users (logged-in).


        If the specified user is not recognized by arborist, this endpoint returns
        ONLY the resources available to members of the `anonymous` and `logged-in` groups.


        If no username is provided (i.e., if no token is provided in the Authorization header)
        this endpoint returns ONLY the resources available to members of the `anonymous` group.


        If the `tags` query string parameter is passed, this endpoint returns the resource
        tags for the resources, not the resources themselves.
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
        - in: query
          name: tags
          required: false
          schema:
            type: string
          description: Instructs the endpoint to return resource tags instead of resources.
      responses:
        200:
          description: >-
            Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResourcesResponse'
        401:
          description: >-
            Authorization header or token failed to validate (authentication error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthenticated'
    post:
      tags:
        - auth
      description: >-
        Given a user token in the body of the request, return a list of
        resources which are accessible to the user (using any action) according
        to the policies listed in the token. This includes the resources available 
        to members of the `anonymous` and `logged-in` groups, which apply to all users 
        (anonymous) and to all logged-in users (logged-in).


        If the specified user is not recognized by arborist, this endpoint returns
        ONLY the resources available to members of the `anonymous` and `logged-in` groups.


        If the `tags` query string parameter is passed, this endpoint returns the resource
        tags for the resources, not the resources themselves.
      parameters:
        - in: query
          name: tags
          required: false
          schema:
            type: string
          description: Instructs the endpoint to return resource tags instead of resources.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthResourcesRequestBody'
      responses:
        200:
          description: >-
            Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResourcesResponse'
        400:
          description: invalid input (missing fields or fields have incorrect types)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        401:
          description: >-
            Token failed to validate (authentication error)
  /health:
    get:
      tags:
        - health
      description: >-
        Check that the arborist instance is healthy and the database is
        available.
      responses:
        200:
          description: Healthy
        500:
          description: Unhealthy (database ping failed)
  /resource:
    get:
      tags:
        - resource
      description: >-
        List all resources which have been created in arborist. The resources in
        arborist are saved in a tree structure; however this endpoint will
        traverse through all the resources and return a flattened list of just
        the full resource paths for all available resources.
      responses:
        200:
          description: list of resources
          content:
            application/json:
              schema:
                type: object
                properties:
                  resource_paths:
                    type: array
                    items:
                      type: string
                    example: ["/data_file", "/programs", "/", "/programs/DEV","/programs/DEV/projects","/programs/DEV/projects/test"]
  /resource/{resourcePath}:
    parameters:
      - in: path
        name: resourcePath
        required: true
        schema:
          type: string
        allowReserved: true
        description: >-
          The full path for a resource, which includes slashes. For example, if
          a resource was created which has the path `/a/b/c`, then the endpoint
          `/resource/a/b/c` can now be used to access this resource.
    get:
      tags:
        - resource
      description: Read the resource given by the path
      responses:
        200:
          description: JSON representation of the specified resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        404:
          description: no resource exists with the given `resourcePath`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    post:
      tags:
        - resource
      description: >-
        Add a new subresource, *underneath* an existing resource. The path *is
        allowed to be empty*; when `resourcePath` is empty, the resource is
        created under the root resource, as `/new_resource`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceInput'
      parameters:
        - in: path
          name: p
          description: >-
            Ordinarily arborist will return an error if parent resources of a
            resource you're trying to create do not exist yet. If the `p`
            parameter is included, it behaves like `mkdir -p` and creates all
            parent resources as necessary.
          schema:
            type: integer
          required: true
      responses:
        201:
          description: JSON representation of successfully-created resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    $ref: '#/components/schemas/Resource'
        404:
          description: no resource exists with the given `resourcePath`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
    put:
      tags:
        - resource
      description: >-
        Overwrite an existing resource. This endpoint requires a fully-formed
        resource model (and cannot patch over individual fields on the existing
        resources). If the specified resource doesn't exist, it will be created.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceInput'
      responses:
        201:
          description: JSON representation of successfully-updated resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    $ref: '#/components/schemas/Resource'
        400:
          description: invalid input (missing fields or fields have incorrect types)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
    delete:
      tags:
        - resource
      responses:
        204:
          description: resource successfully deleted
        404:
          description: no resource exists with the given `resourcePath`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  /role:
    get:
      tags:
        - role
      description: List all the roles registered in arborist.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
    post:
      tags:
        - role
      description: Create a new role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        201:
          description: Success; returns JSON representation of created role
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    $ref: '#/components/schemas/Role'
        400:
          description: invalid input (missing fields or fields have incorrect types)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
  /role/{roleID}:
    parameters:
      - in: path
        name: roleID
        required: true
        schema:
          type: string
        description: The ID for a role registered in arborist.
    get:
      tags:
        - role
      description: >-
        Output the information for a specific role.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        404:
          description: no role exists with the given `roleID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    put:
      tags:
        - role
      description: >-
        Overwrite an existing role with new content. This endpoint requires a
        fully-formed role (and cannot patch over individual fields on the
        existing resources).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        201:
          description: Success; returns JSON representation of updated role
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    $ref: '#/components/schemas/Role'
        400:
          description: invalid input (missing fields or fields have incorrect types)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        404:
          description: no role exists with the given `roleID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    patch:
      tags:
        - role
      description: >-
        Append information to an existing role. The contents of all the fields
        provided in a `PATCH` request are appended to the existing fields on
        this role.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        201:
          description: Success; returns JSON representation of updated role
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    $ref: '#/components/schemas/Role'
        400:
          description: invalid input (missing fields or fields have incorrect types)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        404:
          description: no role exists with the given `roleID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    delete:
      tags:
        - role
      description: Delete this role.
      responses:
        204:
          description: role successfully deleted
        404:
          description: no role exists with the given `roleID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  /policy:
    get:
      tags:
        - policy
      description: >-
        List just the IDs for all policies which have been created in arborist.
      parameters:
        - in: path
          name: expand
          required: false
          schema:
            type: boolean
          description: Whether to return detailed roles instead of only role IDs (disabled by default). If enabled, 'roles' will replace 'role_ids' in the returned data.
      responses:
        200:
          description: list of resources
          content:
            application/json:
              schema:
                type: object
                properties:
                  policies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Policy'
    post:
      tags:
        - policy
      description: Create a new policy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      responses:
        201:
          description: Success; returns JSON representation of created policy
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    $ref: '#/components/schemas/Policy'
        400:
          description: invalid input (missing fields or fields have incorrect types)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
  /policy/{policyID}:
    parameters:
      - in: path
        name: policyID
        required: true
        schema:
          type: string
        description: The ID for a policy registered in arborist.
    get:
      tags:
        - policy
      description: >-
        Output the information for a specific policy.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        404:
          description: no role exists with the given `policyID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    put:
      tags:
        - policy
      description: >-
        Overwrite an existing policy with new content. This endpoint requires a
        fully-formed policy (and cannot patch over individual fields on the
        existing resources).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      responses:
        201:
          description: Success; returns JSON representation of updated policy
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    $ref: '#/components/schemas/Policy'
        400:
          description: invalid input (missing fields or fields have incorrect types)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        404:
          description: no policy exists with the given `policyID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    patch:
      tags:
        - policy
      description: >-
        Append information to an existing policy. The contents of all the fields
        provided in a `PATCH` request are appended to the existing fields on
        this policy.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      responses:
        201:
          description: Success; returns JSON representation of updated policy
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    $ref: '#/components/schemas/Policy'
        400:
          description: invalid input (missing fields or fields have incorrect types)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        404:
          description: no policy exists with the given `policyID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    delete:
      tags:
        - policy
      description: Delete this policy.
      responses:
        204:
          description: policy successfully deleted
        404:
          description: no policy exists with the given `policyID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  /bulk/policy:
    put:
      tags:
        - policy
      description: >-
        Overwrite existing policies with new content. This endpoint requires a list of
        fully-formed policies (and cannot patch over individual fields on the 
        existing resources)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policies'
      responses:
        201:
          description: Success; returns JSON representation of updated policies
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    $ref: '#/components/schemas/Policies'
        400:
          description: invalid input (missing fields or fields have incorrect types)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        404:
          description: no policy exists with the given `policyID`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  /user:
    get:
      tags:
        - user
      description: >-
        List all the users registered in arborist.
      responses:
        200:
          description: list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersList'
    post:
      tags:
        - user
      description: >-
        Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: created user
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    $ref: '#/components/schemas/User'
  /user/{username}:
    parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: the username for a user registered in arborist
    get:
      tags:
        - user
      description: >-
        Read the information for a specific user. 
      responses:
        200:
          description: user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: user not found
    delete:
      tags:
        - user
      description: >-
        Delete this user from the database.
      responses:
        204:
          description: user successfully deleted
        404:
          description: user not found
  /user/{username}/policy:
    parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: the username for a user registered in arborist
      - $ref: "#/components/parameters/authzProvider"
    post:
      tags:
        - user
      description: >-
        Grant an additional policy to a user. The policy must exist already.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantUserPolicy'
      responses:
        204:
          description: successfully granted additional policy
        404:
          description: user not found, or policy not found
    delete:
      tags:
        - user
      description: >-
        Revoke all policies for this user.
      responses:
        204:
          description: successfully revoked policies
  /user/{username}/bulk/policy:
    parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: the username for a user registered in arborist
    post:
      tags:
        - user
      description: >-
        Grant list of policies to a user. The policy must exist already.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantUserPolicies'
      responses:
        204:
          description: successful granted policies
        404:
          description: user not found, or policy not found
  /user/{username}/policy/{policyName}:
    parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: the username for a user registered in arborist
      - in: path
        name: policyName
        required: true
        schema:
          type: string
        description: the name for a policy
      - $ref: "#/components/parameters/authzProvider"
    delete:
      tags:
        - user
      description: >-
        Revoke this policy from this user, so they will no longer have access.
      responses:
        204:
          description: successfully revoked
        404:
          description: user not found
  /user/{username}/resources:
    parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: the username for a user registered in arborist
    get:
      tags:
        - user
      description: >-
        Returns the resources available to a specific user. 
      responses:
        200:
          description: Resources available to this user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResourcesResponse'
        404:
          description: user not found
  /client:
    get:
      tags:
        - client
      description: >-
        List all the clients registered in arborist.
      responses:
        200:
          description: list of clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsList'
    post:
      tags:
        - client
      description: >-
        Create a new client
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      parameters:
        - $ref: "#/components/parameters/authzProvider"
      responses:
        201:
          description: created client
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    $ref: '#/components/schemas/Client'
  /client/{clientID}:
    parameters:
      - in: path
        name: clientID
        required: true
        schema:
          type: string
        description: the client ID for a client registered in arborist
    get:
      tags:
        - client
      description: >-
        Read the information for a specific client.
      responses:
        200:
          description: client information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        404:
          description: client not found
    delete:
      tags:
        - client
      description: >-
        Delete this client from the database.
      responses:
        204:
          description: client successfully deleted
        404:
          description: client not found
  /client/{clientID}/policy:
    parameters:
      - in: path
        name: clientID
        required: true
        schema:
          type: string
        description: the client ID for a client registered in arborist
      - $ref: "#/components/parameters/authzProvider"
    post:
      tags:
        - client
      description: >-
        Grant an additional policy to a client. The policy must exist already.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantPolicy'
      responses:
        204:
          description: successfully granted additional policy
        404:
          description: client not found, or policy not found
    delete:
      tags:
        - client
      description: >-
        Revoke all policies for this client.
      responses:
        204:
          description: successfully revoked policies
  /client/{clientID}/policy/{policyName}:
    parameters:
      - in: path
        name: clientID
        required: true
        schema:
          type: string
        description: the client ID for a client registered in arborist
      - in: path
        name: policyName
        required: true
        schema:
          type: string
        description: the name for a policy
      - $ref: "#/components/parameters/authzProvider"
    delete:
      tags:
        - client
      description: >-
        Revoke this policy from this client, so they will no longer have access.
      responses:
        204:
          description: successfully revoked
        404:
          description: client not found
  /group:
    get:
      tags:
        - group
      description: >-
        List all the groups registered in arborist.
      responses:
        200:
          description: list of groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    $ref: '#/components/schemas/Group'
    post:
      tags:
        - group
      description: >-
        Create a new group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      parameters:
        - $ref: "#/components/parameters/authzProvider"
      responses:
        201:
          description: created group
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    $ref: '#/components/schemas/Group'
    put:
      tags:
        - group
      description: >-
        Update a group with users and policies, create if not exist.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      parameters:
        - $ref: "#/components/parameters/authzProvider"
      responses:
        201:
          description: updated or created group
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    $ref: '#/components/schemas/Group'
  /group/{groupName}:
    parameters:
      - in: path
        name: groupName
        required: true
        schema:
          type: string
        description: the groupName for a group registered in arborist
    get:
      tags:
        - group
      description: >-
        Read the information for a specific group.
      responses:
        200:
          description: group information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        404:
          description: group not found
    delete:
      tags:
        - group
      description: >-
        Delete this group from the database.
      responses:
        204:
          description: group successfully deleted
        404:
          description: group not found
  /group/{groupName}/policy:
    parameters:
      - in: path
        name: groupName
        required: true
        schema:
          type: string
        description: the groupName for a group registered in arborist
      - $ref: "#/components/parameters/authzProvider"
    post:
      tags:
        - group
      description: >-
        Grant an additional policy to a group. The policy must exist already.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantPolicy'
      responses:
        204:
          description: successfully granted additional policy
        404:
          description: group not found, or policy not found
  /group/{groupName}/policy/{policyName}:
    parameters:
      - in: path
        name: groupName
        required: true
        schema:
          type: string
        description: the groupName for a group registered in arborist
      - in: path
        name: policyName
        required: true
        schema:
          type: string
        description: the name for a policy
      - $ref: "#/components/parameters/authzProvider"
    delete:
      tags:
        - group
      description: >-
        Revoke this policy from this group, so they will no longer have access.
      responses:
        204:
          description: successfully revoked
        404:
          description: group not found
  /group/{groupName}/user:
    parameters:
      - in: path
        name: groupName
        required: true
        schema:
          type: string
        description: the groupName for a group registered in arborist
      - $ref: "#/components/parameters/authzProvider"
    post:
      tags:
        - group
      description: >-
        Add a user to this group.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserToGroup'
      responses:
        204:
          description: successfully added user to group
        400:
          description: >-
            couldn't parse JSON input, or couldn't parse timestamp, or user not
            provided, or user doesn't exist
        404:
          description: group does not exist
  /group/{groupName}/user/{username}:
    parameters:
      - in: path
        name: groupName
        required: true
        schema:
          type: string
        description: the groupName for a group registered in arborist
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: the username for the user to remove from the group
      - $ref: "#/components/parameters/authzProvider"
    delete:
      tags:
        - group
      description: Remove a user from this group.
      responses:
        204:
          description: successfully removed user from group
        500:
          description: unable to remove user from group
components:
  schemas:
    AuthRequestBody:
      type: object
      properties:
        user:
          type: object
          properties:
            token:
              type: string
              description: >-
                A JWT token belonging to a user, as defined by RFC 7519.
              example: 'eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0[...]'
        request:
          type: object
          description: >-
              The action and resource a user is trying to access. Instead of
              `request` the API also accepts `requests` which should be an array
              of these objects. When using `requests`, arborist will return true
              if the user has access for every request in the list, though they
              may be granted via different policies.
          properties:
            resource:
              type: string
              example: '2iEb_M'
              description: >-
                The identifier for a resource a user is trying to access, which
                can be *either* the human-readable path or the tag that
                arborist generated for that resource.
            action:
              type: object
              properties:
                service:
                  type: string
                  example: 'fence'
                method:
                  type: string
                  example: 'read-storage'
              required:
                - service
                  method
          required:
            - token
        requests:
          type: array
          items:
            type: object
            description: >-
              Same as the `request` field. Use `requests` to send multiple
              auth requests. Arborist returns positive authorization if every
              request in the list succeeds.
            properties:
              resource:
                type: string
                example: '/programs/DEV/projects/test'
              action:
                type: object
                properties:
                  service:
                    type: string
                    example: 'fence'
                  method:
                    type: string
                    example: 'read-storage'
                required:
                  - service
                    method
            required:
              - token
    AuthRequestResponse:
      type: object
      properties:
        auth:
          type: boolean
    AuthResourcesRequestBody:
      type: object
      properties:
        user:
          type: object
          properties:
            token:
              type: string
              example: 'eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0[...]'
          required:
            - token
      required:
        - user
    AuthResourcesResponse:
      type: object
      properties:
        resources:
          type: array
          items:
            type: string
          example: ['/programs/DEV/projects/test', '/programs/foo/projects/bar']
    UserError:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: an explanation of the error that occurred
            code:
              type: integer
              description: the HTTP error code
      example:
        error:
          message: "input resource is missing the following required fields: ..."
          code: 400
    NotFound:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: an explanation of the error that occurred
            code:
              type: integer
              description: the HTTP error code
      example:
        error:
          message: "resource with path `/foo/bar` does not exist"
          code: 404
    Resource:
      type: object
      properties:
        name:
          type: string
          description: >-
            The name (final path segment) of this particular resource. The names
            are not globally unique; they must be unique only within the
            "directory" of the tree they live in.  example: "programs"
        path:
          type: string
          description: >-
            The full path to this resource, which is formed from the list of resource
            names starting from the root and continuing down to this one, joined by slashes.
            Note that the path is generated by arborist and should not be included in the
            input value.
          example: "/programs"
        description:
          type: string
        subresources:
          type: array
          description: nested Resource items
          items:
            type: string
          example:  ["/programs/DEV-1", "/programs/DEV-2"]
    ResourceInput:
      type: object
      description: >-
        Input resources require *either* the `name` field, if the resource is
        input as the immediate child of another resource node, or the `path`
        field if submitted at the root resource endpoint. Note that the name
        and path are only allowed to contain alphanumeric characters and
        underscores.
      properties:
        name:
          type: string
          description: >-
            The name (final path segment) of this particular resource. The names
            are not globally unique; they must be unique only within the
            "directory" of the tree they live in.  example: "programs"
        path:
          type: string
          description: >-
            The full path to this resource, which is formed from the list of resource
            names starting from the root and continuing down to this one, joined by slashes.
            Note that the path is generated by arborist and should not be included in the
            input value.
          example: "/programs"
        description:
          type: string
        subresources:
          type: array
          description: nested Resource items
          items:
            type: string
          example:  ["/programs/DEV-1", "/programs/DEV-2"]
    Role:
      type: object
      properties:
        id:
          type: string
          description: a name which uniquely identifies this role in arborist
          example: "read"
        description:
          type: string
          description: some optional human-readable information about the role
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
      required:
        - id
          permissions
    Permission:
      type: object
      description: a permission to do a specific action.
      properties:
        id:
          type: string
          description: a name which uniquely identifies this permission in arborist
          example: "read"
        description:
          type: string
          description: some optional human-readable information about the permission
        action:
          type: object
          description: a model for an action that a user can do
          properties:
            service:
              type: string
              description: >-
                the service in which the action is granted; or, `"*"` to grant
                the role for all, arbitrary services
              example: "fence"
            method:
              type: string
              description: >-
                a basic operation such as read or write; could also use RESTful
                language such as GET/POST/etc.
              example: "read"
          required:
            - service
              method
      required:
        - id
          action
    Policy:
      type: object
      properties:
        id:
          type: string
          description: a name which uniquely identifies this permission in arborist
        role_ids:
          type: array
          description: a list of role IDs
          items:
            type: string
          example: ["upload"]
        resource_paths:
          type: array
          description: a list of resource paths
          items:
            type: string
          example: ["/programs/DEV/projects/test"]
    Policies:
      type: array
      description: list of policies
      items:
        $ref: '#/components/schemas/Policy'
    GrantPolicy:
      type: object
      properties:
        policy:
          type: string
          description: the policy to grant
          example: 'policy_name'
    GrantUserPolicy:
      type: object
      properties:
        policy:
          type: string
          description: the policy to grant
          example: 'policy_name'
          required: true
        expires_at:
          type: string
          description: >-
            timestamp in RFC 3339 format specifying the time at which the
            user's access to this policy should expire
          example: '2019-08-12T12:34:56Z'
    GrantUserPolicies:
      type: array
      description: list of policies for a user
      items:
        $ref: '#/components/schemas/GrantUserPolicy'
    AddUserToGroup:
      type: object
      properties:
        username:
          type: string
          description: username for the user in arborist to add to the group
          required: true
        expires_at:
          type: string
          description: >-
            timestamp in RFC 3339 format specifying the time at which the
            user's access to this group should expire
          example: '2019-08-12T12:34:56Z'
    User:
      type: object
      properties:
        name:
          type: string
          example: 'username'
        email:
          type: string
          example: 'user@example.net'
        groups:
          type: array
          items:
            type: string
            example: 'group'
        policies:
          type: array
          items:
            type: object
            properties:
              policy:
                type: string
                example: 'policy'
              expires_at:
                type: string
                example: '2019-08-12T12:34:56Z'
    UsersList:
      type: object
      properties:
        users:
          type: array
          items:
            type: string
            example: 'username'
    Client:
      type: object
      properties:
        clientID:
          type: string
          example: 'x68GTbL0NHOV085t51jEuJW3vDrng3G5hr7p1B4l'
        policies:
          type: array
          items:
            type: string
            example: 'policy'
    ClientsList:
      type: object
      properties:
        clients:
          type: array
          items:
            type: string
            example: 'x68GTbL0NHOV085t51jEuJW3vDrng3G5hr7p1B4l'
    Group:
      type: object
      properties:
        name:
          type: string
          example: 'example_group'
        users:
          type: array
          items:
            type: string
            example: 'username'
        policies:
          type: array
          items:
            type: string
            example: 'policy'
    Unauthenticated:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: failed to validate JWT
            code:
              type: integer
              example: 401
  parameters:
    authzProvider:
      name: X-AuthZ-Provider
      in: header
      schema:
        type: string
      description: >-
        operate only within the given AuthZ provider if specified
        (data mismatching the given AuthZ provider will not be affected)
